{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n///<reference path=\"index.d.ts\"/>\r\nvar _a;\r\nvar extendFuncs = {\r\n    remove: function (filter) {\r\n        if (typeof (filter) == 'function') {\r\n            for (var i = this.length - 1; i > -1; --i) {\r\n                filter(this[i], i, this) && this.splice(i, 1);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = this.length - 1; i > -1; --i) {\r\n                this[i] === filter && this.splice(i, 1);\r\n            }\r\n        }\r\n        return this;\r\n    },\r\n    removeOne: function (filter) {\r\n        if (typeof (filter) == 'function') {\r\n            for (var i = 0; i < this.length; ++i) {\r\n                if (filter(this[i], i, this)) {\r\n                    this.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < this.length; ++i) {\r\n                if (this[i] === filter) {\r\n                    this.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    },\r\n    first: function () {\r\n        return this.length ? this[0] : null;\r\n    },\r\n    last: function () {\r\n        return this.length ? this[this.length - 1] : null;\r\n    },\r\n    max: function (mapper) {\r\n        if (!this.length) {\r\n            return null;\r\n        }\r\n        if (typeof (mapper) == 'function') {\r\n            var max = mapper(this[0], 0, this);\r\n            for (var i = 1; i < this.length; ++i) {\r\n                var temp = mapper(this[i], i, this);\r\n                max = temp > max ? temp : max;\r\n            }\r\n            return max;\r\n        }\r\n        else {\r\n            return this.reduce(function (prev, cur) { return prev > cur ? prev : cur; });\r\n        }\r\n    },\r\n    min: function (mapper) {\r\n        if (!this.length) {\r\n            return null;\r\n        }\r\n        function _min(a, b) {\r\n            return a < b ? a : b;\r\n        }\r\n        if (typeof (mapper) == 'function') {\r\n            var min = mapper(this[0], 0, this);\r\n            for (var i = 1; i < this.length; ++i) {\r\n                var temp = mapper(this[i], i, this);\r\n                min = temp < min ? temp : min;\r\n            }\r\n            return min;\r\n        }\r\n        else {\r\n            return this.reduce(function (prev, cur) { return _min(prev, cur); });\r\n        }\r\n    },\r\n    distinct: function () {\r\n        return this.filter(function (v, i, arr) { return arr.indexOf(v) === i; });\r\n    },\r\n    filterIndex: function (filter) {\r\n        var output = [];\r\n        for (var i = 0; i < this.length; ++i) {\r\n            if (filter(this[i], i, this)) {\r\n                output.push(i);\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    count: function (filter) {\r\n        var result = 0;\r\n        for (var i = 0; i < this.length; ++i) {\r\n            if (filter(this[i], i, this)) {\r\n                ++result;\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    sum: function (mapper) {\r\n        var result = 0;\r\n        for (var i = 0; i < this.length; ++i) {\r\n            result += mapper ? mapper(this[i], i, this) : this[i];\r\n        }\r\n        return result;\r\n    },\r\n    average: function (mapper) {\r\n        return this.sum(mapper) / this.length;\r\n    },\r\n    orderBy: function () {\r\n        var mappers = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            mappers[_i] = arguments[_i];\r\n        }\r\n        return this.slice().sort(function (a, b) {\r\n            for (var i = 0; i < mappers.length; ++i) {\r\n                var va = mappers[i](a);\r\n                var vb = mappers[i](b);\r\n                if (va > vb) {\r\n                    return 1;\r\n                }\r\n                else if (va < vb) {\r\n                    return -1;\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n    },\r\n    orderByDesc: function () {\r\n        var mappers = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            mappers[_i] = arguments[_i];\r\n        }\r\n        return this.slice().sort(function (a, b) {\r\n            for (var i = 0; i < mappers.length; ++i) {\r\n                var va = mappers[i](a);\r\n                var vb = mappers[i](b);\r\n                if (va > vb) {\r\n                    return -1;\r\n                }\r\n                else if (va < vb) {\r\n                    return 1;\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n    },\r\n    binarySearch: function (value, keyMapper) {\r\n        var low = 0, high = this.length - 1;\r\n        while (low <= high) {\r\n            var mid = ((high + low) / 2) | 0;\r\n            var midValue = keyMapper ? keyMapper(this[mid]) : this[mid];\r\n            if (value === midValue) {\r\n                return mid;\r\n            }\r\n            else if (value > midValue) {\r\n                low = mid + 1;\r\n            }\r\n            else if (value < midValue) {\r\n                high = mid - 1;\r\n            }\r\n        }\r\n        return -1;\r\n    },\r\n    binaryInsert: function (item, keyMapper, unique) {\r\n        if (typeof (keyMapper) == 'boolean') {\r\n            unique = keyMapper;\r\n            keyMapper = undefined;\r\n        }\r\n        var low = 0, high = this.length - 1;\r\n        var mid = NaN;\r\n        var itemValue = keyMapper ? keyMapper(item) : item;\r\n        while (low <= high) {\r\n            mid = ((high + low) / 2) | 0;\r\n            var midValue = keyMapper ? keyMapper(this[mid]) : this[mid];\r\n            if (itemValue === midValue) {\r\n                if (unique) {\r\n                    return mid;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else if (itemValue > midValue) {\r\n                low = mid + 1;\r\n            }\r\n            else if (itemValue < midValue) {\r\n                high = mid - 1;\r\n            }\r\n        }\r\n        var index = low > mid ? mid + 1 : mid;\r\n        this.splice(index, 0, item);\r\n        return index;\r\n    },\r\n    binaryDistinct: function (keyMapper) {\r\n        return this.filter(function (v, i, arr) { return arr.binarySearch(v, keyMapper) === i; });\r\n    },\r\n    findLast: function (predicate) {\r\n        for (var i = this.length - 1; i > -1; --i) {\r\n            if (predicate(this[i], i, this)) {\r\n                return this[i];\r\n            }\r\n        }\r\n        return undefined;\r\n    },\r\n    findLastIndex: function (predicate) {\r\n        for (var i = this.length - 1; i > -1; --i) {\r\n            if (predicate(this[i], i, this)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    },\r\n    groupBy: function (grouper) {\r\n        var group = this.reduce(function (prev, next) {\r\n            var groupKey = grouper(next);\r\n            if (!prev[groupKey]) {\r\n                prev[groupKey] = [];\r\n            }\r\n            prev[groupKey].push(next);\r\n            return prev;\r\n        }, {});\r\n        return Object.keys(group).map(function (key) {\r\n            var arr = group[key];\r\n            arr.key = key;\r\n            return arr;\r\n        });\r\n    },\r\n    __k8w_extended: {\r\n        value: true\r\n    }\r\n};\r\nif (!Array.prototype.__k8w_extended) {\r\n    for (var key in extendFuncs) {\r\n        Object.defineProperties(Array.prototype, (_a = {},\r\n            _a[key] = {\r\n                value: extendFuncs[key],\r\n                writable: true\r\n            },\r\n            _a));\r\n    }\r\n}\r\n"]}