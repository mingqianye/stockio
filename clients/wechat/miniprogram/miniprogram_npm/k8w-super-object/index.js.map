{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n///<reference path=\"index.d.ts\"/>\r\n/**\r\n * 将sources合并到target，该合并全部是深拷贝\r\n * @param target\r\n * @param sources\r\n * @returns {Object}\r\n */\r\nObject.merge = function (target) {\r\n    var sources = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        sources[_i - 1] = arguments[_i];\r\n    }\r\n    for (var i = 0; i < sources.length; ++i) {\r\n        var source = sources[i];\r\n        if (typeof source != 'object' || source == null) {\r\n            continue;\r\n        }\r\n        for (var skey in source) {\r\n            //只处理自身的key 这里可能来自于外部prototype的扩展\r\n            if (!source.hasOwnProperty(skey)) {\r\n                continue;\r\n            }\r\n            if (source[skey] instanceof Date) {\r\n                //Date类型 要克隆一份 保证深拷贝\r\n                target[skey] = new Date(source[skey]);\r\n                continue;\r\n            }\r\n            else if (typeof (target[skey]) == 'object' && target[skey] != null && typeof (source[skey]) == 'object' && source[skey] != null) {\r\n                // 两个都是Object 递归merge之\r\n                Object.merge(target[skey], source[skey]);\r\n            }\r\n            else {\r\n                if (Array.isArray(source[skey])) {\r\n                    // 数组merge后还是数组\r\n                    target[skey] = Object.merge([], source[skey]);\r\n                }\r\n                else if (typeof (source[skey]) == 'object' && source[skey] !== null) {\r\n                    // Object要克隆一份以确保深拷贝\r\n                    target[skey] = Object.merge({}, source[skey]);\r\n                }\r\n                else {\r\n                    // 基本类型 直接赋值即可\r\n                    target[skey] = source[skey];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n};\r\nif (!Object.values) {\r\n    Object.values = function (obj) {\r\n        var output = [];\r\n        for (var k in obj) {\r\n            obj.hasOwnProperty(k) && output.push(obj[k]);\r\n        }\r\n        return output;\r\n    };\r\n}\r\nif (!Object.entries) {\r\n    Object.entries = function (obj) {\r\n        var output = [];\r\n        for (var key in obj) {\r\n            if (!obj.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            output.push([key, obj[key]]);\r\n        }\r\n        return output;\r\n    };\r\n}\r\nObject.forEach = function (obj, handler) {\r\n    for (var key in obj) {\r\n        if (!obj.hasOwnProperty(key)) {\r\n            return;\r\n        }\r\n        handler(obj[key], key, obj);\r\n    }\r\n};\r\n"]}