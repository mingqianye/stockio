{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*!\n * TSRPC Proto v1.4.3\n * -----------------------------------------\n * Copyright (c) Kingworks Corporation.\n * MIT License\n * https://github.com/k8w/tsrpc-proto\n */\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tsbufferSchema = require('tsbuffer-schema');\nvar tslib = require('tslib');\n\nvar empty = function () { };\r\nfunction setLogLevel(logger, logLevel) {\r\n    switch (logLevel) {\r\n        case 'none':\r\n            return { debug: empty, log: empty, warn: empty, error: empty };\r\n        case 'error':\r\n            return { debug: empty, log: empty, warn: empty, error: logger.error.bind(logger) };\r\n        case 'warn':\r\n            return { debug: empty, log: empty, warn: logger.warn.bind(logger), error: logger.error.bind(logger) };\r\n        case 'info':\r\n            return { debug: empty, log: logger.log.bind(logger), warn: logger.warn.bind(logger), error: logger.error.bind(logger) };\r\n        case 'debug':\r\n            return logger;\r\n        default:\r\n            throw new Error(\"Invalid logLevel: '\".concat(logLevel, \"'\"));\r\n    }\r\n}\n\nexports.TsrpcErrorType = void 0;\r\n(function (TsrpcErrorType) {\r\n    /** Network error, like connection broken, network timeout, etc. */\r\n    TsrpcErrorType[\"NetworkError\"] = \"NetworkError\";\r\n    /**\r\n     * Server exception, for example \"request format error\", \"database exception\", etc.\r\n     *\r\n     * @remarks\r\n     * This error message may be not suitable to show to user,\r\n     * but the error info is useful for engineer to find some bug.\r\n     * So you can show a user-friendly message to user (like \"System error, please contact XXX\"),\r\n     * and report some debug info at the same time.\r\n     */\r\n    TsrpcErrorType[\"ServerError\"] = \"ServerError\";\r\n    /** Client exception, for example parse server output error.\r\n     * (May because of the proto file is not the same between server and client)\r\n     */\r\n    TsrpcErrorType[\"ClientError\"] = \"ClientError\";\r\n    /**\r\n     * The business error returned by `call.error`.\r\n     * It is always business-relatived, for example `call.error('Password is incorrect')`, `call.error('Not enough credit')`, etc.\r\n     */\r\n    TsrpcErrorType[\"ApiError\"] = \"ApiError\";\r\n})(exports.TsrpcErrorType || (exports.TsrpcErrorType = {}));\n\nvar TransportDataProto = {\r\n    \"ServerInputData\": {\r\n        \"type\": tsbufferSchema.SchemaType.Interface,\r\n        \"properties\": [\r\n            {\r\n                \"id\": 0,\r\n                \"name\": \"serviceId\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Number,\r\n                    \"scalarType\": \"uint\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"name\": \"buffer\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Buffer,\r\n                    \"arrayType\": \"Uint8Array\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"name\": \"sn\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Number,\r\n                    \"scalarType\": \"uint\"\r\n                },\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    },\r\n    \"ServerOutputData\": {\r\n        \"type\": tsbufferSchema.SchemaType.Interface,\r\n        \"properties\": [\r\n            {\r\n                \"id\": 0,\r\n                \"name\": \"buffer\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Buffer,\r\n                    \"arrayType\": \"Uint8Array\"\r\n                },\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"name\": \"error\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Reference,\r\n                    \"target\": \"TsrpcErrorData\"\r\n                },\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"name\": \"serviceId\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Number,\r\n                    \"scalarType\": \"uint\"\r\n                },\r\n                \"optional\": true\r\n            },\r\n            {\r\n                \"id\": 3,\r\n                \"name\": \"sn\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Number,\r\n                    \"scalarType\": \"uint\"\r\n                },\r\n                \"optional\": true\r\n            }\r\n        ]\r\n    },\r\n    \"TsrpcErrorData\": {\r\n        \"type\": tsbufferSchema.SchemaType.Interface,\r\n        \"properties\": [\r\n            {\r\n                \"id\": 0,\r\n                \"name\": \"message\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.String\r\n                }\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"name\": \"type\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Reference,\r\n                    \"target\": \"TsrpcErrorType\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"name\": \"code\",\r\n                \"type\": {\r\n                    \"type\": tsbufferSchema.SchemaType.Union,\r\n                    \"members\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"type\": {\r\n                                \"type\": tsbufferSchema.SchemaType.String\r\n                            }\r\n                        },\r\n                        {\r\n                            \"id\": 1,\r\n                            \"type\": {\r\n                                \"type\": tsbufferSchema.SchemaType.Number,\r\n                                \"scalarType\": \"int\"\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                \"optional\": true\r\n            }\r\n        ],\r\n        \"indexSignature\": {\r\n            \"keyType\": \"String\",\r\n            \"type\": {\r\n                \"type\": tsbufferSchema.SchemaType.Any\r\n            }\r\n        }\r\n    },\r\n    \"TsrpcErrorType\": {\r\n        \"type\": tsbufferSchema.SchemaType.Enum,\r\n        \"members\": [\r\n            {\r\n                \"id\": 0,\r\n                \"value\": \"NetworkError\"\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"value\": \"ServerError\"\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"value\": \"ClientError\"\r\n            },\r\n            {\r\n                \"id\": 3,\r\n                \"value\": \"ApiError\"\r\n            }\r\n        ]\r\n    }\r\n};\n\n/**\r\n * A unified Error that returned by TSRPC server or client\r\n *\r\n * @remarks\r\n * It has many uses, for example:\r\n *\r\n * 1. You can handle business errors and network errors uniformly.\r\n * 2. In API handle process, `throw new TsrpcError('xxx')` would return the same error to client directly (like `call.error()`),\r\n * while `throw new Error('XXX')` would return a unified \"Server Internal Error\".\r\n */\r\nvar TsrpcError = /** @class */ (function () {\r\n    function TsrpcError(dataOrMessage, data) {\r\n        var _a;\r\n        if (typeof dataOrMessage === 'string') {\r\n            this.message = dataOrMessage;\r\n            this.type = (_a = data === null || data === void 0 ? void 0 : data.type) !== null && _a !== void 0 ? _a : exports.TsrpcErrorType.ApiError;\r\n            tslib.__assign(this, data);\r\n        }\r\n        else {\r\n            tslib.__assign(this, dataOrMessage);\r\n        }\r\n    }\r\n    TsrpcError.prototype.toString = function () {\r\n        return \"[TSRPC \".concat(this.type, \"]: \").concat(this.message);\r\n    };\r\n    TsrpcError.Type = exports.TsrpcErrorType;\r\n    return TsrpcError;\r\n}());\n\nexports.TransportDataProto = TransportDataProto;\nexports.TsrpcError = TsrpcError;\nexports.setLogLevel = setLogLevel;\n"]}